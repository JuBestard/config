1a.

n = 3
len(M[0]) != n -> faux

[1 1 1]
[2 2 2]
[3 3 3]
[]

s = 0

i = 0 :
[1 1 1 0]
[2 2 2]
[3 3 3]
[0]
	j = 0:
	[1 1 1 1]
	[2 2 2]
	[3 3 3]
	[1]
	
	j = 1:
	[1 1 1 2]
	[2 2 2]
	[3 3 3]
	[3]
	
	j = 2:
	[1 1 1 3]
	[2 2 2]
	[3 3 3]
	[6]
s = 1


i = 1:
[1 1 1 3]
[2 2 2 0]
[3 3 3]
[6 0]
	j = 0:
	[1 1 1 3]
	[2 2 2 2]
	[3 3 3]
	[6 1]
	
	j = 1:
	[1 1 1 3]
	[2 2 2 4]
	[3 3 3]
	[6 3]
	
	j = 2:
	[1 1 1 3]
	[2 2 2 6]
	[3 3 3]
	[6 6]
s = 3

i = 1:
[1 1 1 3]
[2 2 2 6]
[3 3 3 0]
[6 6 0]
	j = 0:
	[1 1 1 3]
	[2 2 2 6]
	[3 3 3 3]
	[6 6 1]
	
	j = 1:
	[1 1 1 3]
	[2 2 2 6]
	[3 3 3 6]
	[6 6 2]
	
	j = 2:
	[1 1 1 3]
	[2 2 2 6]
	[3 3 3 9]
	[6 6 6]

s = 6
M => 	[1 1 1 3]
	[2 2 2 6]
	[3 3 3 9]
	[6 6 6 6]


1B.

[1 3 0 1 4]
[1 2 3 0 6]
[3 1 3 2 9]
[1 0 3 0 4]
[6 6 9 3 6]



La fonction Mystery fait la somme de chaque ligne et colonnes ainsi que de la diagoanle de la Matrice



def double(A,B):
	l = len(A)
	c = len(A[0])
	if l != len(B) or c != len(B[0]):
		return False
	else:
		i = 0
		j = c
		while i < l and j == c:
			j = 0
			while j < c and B[i][j] == 2 * A[i][j]:
				j += 1
			i += 1
		return j == c



Algo : .- .-.. --. ---
IAMTHEB0SS

def morse(B,x):





Ex 4 :

1 ->

2 -> Dégénéré


					A
		L					T
	G		I			H			M
O		R						S













	
